import React, { useState } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { CreditReport } from '@/pages/Index';
import { Download, Calendar, Building, TrendingUp, AlertTriangle, MessageSquare, BarChart3 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface ReportDisplayProps {
  report: CreditReport;
}

type SectionTitle = 'Company Overview' | 'Financial Highlights' | 'Key Risks' | 'Management Commentary';

export const ReportDisplay: React.FC<ReportDisplayProps> = ({ report }) => {
  const [activeSection, setActiveSection] = useState<SectionTitle>('Company Overview');
  const { toast } = useToast();

  if (!report || !report.companyName) {
    return <div>No report data available.</div>;
  }

  const handleDownload = () => {
    const reportContent = `
FINANCIAL ANALYSIS REPORT: ${report.companyName.toUpperCase()}

Generated on: ${new Date(report.generatedAt).toLocaleDateString()}

===============================================

COMPANY OVERVIEW
${report.overview}

FINANCIAL HIGHLIGHTS
${report.financialHighlights}

KEY RISKS
${report.keyRisks}

MANAGEMENT COMMENTARY
${report.managementCommentary}

===============================================
Generated by Financial Analyzer
    `.trim();

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${report.companyName.replace(/[^a-z0-9]/gi, '_')}_financial_analysis.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Report downloaded",
      description: "Your financial analysis report has been saved as a text file.",
    });
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const sections = [
    {
      title: 'Company Overview' as SectionTitle,
      content: report.overview,
      icon: Building,
      bgColor: 'backdrop-blur-xl bg-white/40',
      borderColor: 'border-white/30',
      iconBg: 'backdrop-blur-sm bg-black/10',
      iconColor: 'text-black',
      titleColor: 'text-black',
      description: 'Business model and strategic positioning analysis'
    },
    {
      title: 'Financial Highlights' as SectionTitle,
      content: report.financialHighlights,
      icon: BarChart3,
      bgColor: 'backdrop-blur-xl bg-white/40',
      borderColor: 'border-white/30',
      iconBg: 'backdrop-blur-sm bg-black/10',
      iconColor: 'text-black',
      titleColor: 'text-black',
      description: 'Key financial metrics and performance indicators'
    },
    {
      title: 'Key Risks' as SectionTitle,
      content: report.keyRisks,
      icon: AlertTriangle,
      bgColor: 'backdrop-blur-xl bg-white/40',
      borderColor: 'border-white/30',
      iconBg: 'backdrop-blur-sm bg-black/10',
      iconColor: 'text-black',
      titleColor: 'text-black',
      description: 'Identified business, financial, and market risk factors'
    },
    {
      title: 'Management Commentary' as SectionTitle,
      content: report.managementCommentary,
      icon: MessageSquare,
      bgColor: 'backdrop-blur-xl bg-white/40',
      borderColor: 'border-white/30',
      iconBg: 'backdrop-blur-sm bg-black/10',
      iconColor: 'text-black',
      titleColor: 'text-black',
      description: 'Executive insights and strategic outlook'
    }
  ];

  const getButtonClass = (sectionTitle: SectionTitle) => {
    const isActive = activeSection === sectionTitle;
    const baseClass = "py-2 px-4 rounded-lg font-semibold transition-all duration-300 ease-in-out shadow-lg flex items-center justify-center text-sm";

    if (isActive) {
      return `${baseClass} backdrop-blur-md bg-black/80 text-white border border-white/20 scale-105`;
    }

    return `${baseClass} backdrop-blur-md bg-white/50 hover:bg-white/70 text-black border border-white/40`;
  };
  
  const activeSectionData = sections.find(s => s.title === activeSection);

  return (
    <div className="space-y-8">
      {/* Report Header */}
      <Card className="p-6 backdrop-blur-xl bg-white/40 border border-white/30 shadow-2xl">
        <div className="flex items-center justify-between">
          <div className="space-y-2">
            <div className="flex items-center space-x-3">
              <div className="backdrop-blur-sm bg-black/80 p-2 rounded-lg shadow-lg border border-white/20">
                <TrendingUp className="h-6 w-6 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold text-black">{report.companyName}</h1>
                <p className="text-base text-gray-700 font-medium">Financial Analysis Report</p>
              </div>
            </div>
            <div className="flex items-center space-x-4 text-sm text-gray-700 pl-1">
              <div className="flex items-center space-x-1.5">
                <Calendar className="h-4 w-4" />
                <span className="font-medium">{formatDate(report.generatedAt)}</span>
              </div>
              <Badge variant="secondary" className="backdrop-blur-md bg-white/60 text-black border border-white/40 px-3 py-1 shadow-lg">
                LLM Generated Analysis
              </Badge>
            </div>
          </div>
          
          <Button onClick={handleDownload} className="backdrop-blur-md bg-black/80 hover:bg-black/90 text-white px-4 py-2 text-sm font-medium border border-white/20 shadow-xl">
            <Download className="mr-2 h-4 w-4" />
            Download Report
          </Button>
        </div>
      </Card>

      {/* Section Buttons */}
      <Card className="p-3 backdrop-blur-xl bg-white/30 border border-white/30 shadow-2xl">
        <div className="flex justify-center space-x-3">
          {sections.map(section => (
            <button
              key={section.title}
              onClick={() => setActiveSection(section.title)}
              className={getButtonClass(section.title)}
            >
              <section.icon className="mr-2 h-5 w-5" />
              <span>{section.title}</span>
            </button>
          ))}
        </div>
      </Card>
      
      {/* Report Sections */}
        <div className="grid gap-8">
          <Card 
             className={`p-8 ${activeSectionData?.bgColor} ${activeSectionData?.borderColor} border hover:shadow-2xl transition-all duration-300 hover:scale-[1.02] shadow-xl`}
           >
             <div className="space-y-6">
               {/* Section Header */}
               <div className="flex items-start justify-between">
                 <div className="flex items-center space-x-4">
                   <div className={`p-4 rounded-xl ${activeSectionData?.iconBg} shadow-lg border border-white/20`}>
                     {activeSectionData && <activeSectionData.icon className={`h-7 w-7 ${activeSectionData?.iconColor}`} />}
                   </div>
                   <div>
                     <h2 className={`text-2xl font-bold ${activeSectionData?.titleColor}`}>
                       {activeSectionData?.title}
                     </h2>
                     <p className="text-gray-700 text-sm font-medium mt-1">
                       {activeSectionData?.description}
                     </p>
                   </div>
                 </div>
               </div>
               
               {/* Section Content */}
                 <div className="backdrop-blur-md bg-white/60 rounded-lg p-6 shadow-lg border border-white/40">
                   <div className="prose prose-slate max-w-none prose-sm whitespace-pre-wrap text-black">
                    {activeSectionData?.content}
                   </div>
                 </div>
             </div>
           </Card>
        </div>
    </div>
  );
};
